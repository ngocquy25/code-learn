{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAceInstance = exports.debounce = exports.editorEvents = exports.editorOptions = void 0;\nvar editorOptions = [\"minLines\", \"maxLines\", \"readOnly\", \"highlightActiveLine\", \"tabSize\", \"enableBasicAutocompletion\", \"enableLiveAutocompletion\", \"enableSnippets\"];\nexports.editorOptions = editorOptions;\nvar editorEvents = [\"onChange\", \"onFocus\", \"onInput\", \"onBlur\", \"onCopy\", \"onPaste\", \"onSelectionChange\", \"onCursorChange\", \"onScroll\", \"handleOptions\", \"updateRef\"];\nexports.editorEvents = editorEvents;\n\nvar getAceInstance = function () {\n  var ace;\n\n  if (typeof window === \"undefined\") {\n    // ace-builds just needs some window object to attach ace to.\n    // During SSR even just an empty object will work.\n    global.window = {};\n    ace = require(\"ace-builds\"); // And it can be discarded immediately afterward to avoid confusing\n    // other libraries that might detect SSR the same way we did.\n\n    delete global.window;\n  } else if (window.ace) {\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\n    ace = window.ace;\n    ace.acequire = window.ace.require || window.ace.acequire;\n  } else {\n    ace = require(\"ace-builds\");\n  }\n\n  return ace;\n};\n\nexports.getAceInstance = getAceInstance;\n\nvar debounce = function (fn, delay) {\n  var timer = null; // tslint:disable-next-line\n\n  return function () {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n\nexports.debounce = debounce;","map":{"version":3,"sources":["/Users/jirou/Coding/React/code-learn/app/node_modules/react-ace/src/editorOptions.ts"],"names":[],"mappings":";;;;;;AAYA,IAAM,aAAa,GAAmB,CACpC,UADoC,EAEpC,UAFoC,EAGpC,UAHoC,EAIpC,qBAJoC,EAKpC,SALoC,EAMpC,2BANoC,EAOpC,0BAPoC,EAQpC,gBARoC,CAAtC;AA+ES,OAAA,CAAA,aAAA,GAAA,aAAA;AAvDT,IAAM,YAAY,GAAkB,CAClC,UADkC,EAElC,SAFkC,EAGlC,SAHkC,EAIlC,QAJkC,EAKlC,QALkC,EAMlC,SANkC,EAOlC,mBAPkC,EAQlC,gBARkC,EASlC,UATkC,EAUlC,eAVkC,EAWlC,WAXkC,CAApC;AAuDwB,OAAA,CAAA,YAAA,GAAA,YAAA;;AAhCxB,IAAM,cAAc,GAAG,YAAA;AACrB,MAAI,GAAJ;;AACA,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,EAAhB;AACA,IAAA,GAAG,GAAG,OAAO,CAAC,YAAD,CAAb,CAJiC,CAKjC;AACA;;AACA,WAAO,MAAM,CAAC,MAAd;AACD,GARD,MAQO,IAAK,MAAc,CAAC,GAApB,EAAyB;AAC9B;AACA,IAAA,GAAG,GAAI,MAAc,CAAC,GAAtB;AACA,IAAA,GAAG,CAAC,QAAJ,GAAgB,MAAc,CAAC,GAAf,CAAmB,OAAnB,IAA+B,MAAc,CAAC,GAAf,CAAmB,QAAlE;AACD,GAJM,MAIA;AACL,IAAA,GAAG,GAAG,OAAO,CAAC,YAAD,CAAb;AACD;;AACD,SAAO,GAAP;AACD,CAlBD;;AAgCgD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAZhD,IAAM,QAAQ,GAAG,UAAC,EAAD,EAA+B,KAA/B,EAA4C;AAC3D,MAAI,KAAK,GAAQ,IAAjB,CAD2D,CAE3D;;AACA,SAAO,YAAA;AACL,QAAM,OAAO,GAAG,IAAhB;AACA,QAAM,IAAI,GAAG,SAAb;AACA,IAAA,YAAY,CAAC,KAAD,CAAZ;AACA,IAAA,KAAK,GAAG,UAAU,CAAC,YAAA;AACjB,MAAA,EAAE,CAAC,KAAH,CAAS,OAAT,EAAkB,IAAlB;AACD,KAFiB,EAEf,KAFe,CAAlB;AAGD,GAPD;AAQD,CAXD;;AAYsC,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["import * as AceBuilds from \"ace-builds\";\n\ntype EditorOption =\n  | \"minLines\"\n  | \"maxLines\"\n  | \"readOnly\"\n  | \"highlightActiveLine\"\n  | \"tabSize\"\n  | \"enableBasicAutocompletion\"\n  | \"enableLiveAutocompletion\"\n  | \"enableSnippets\";\n\nconst editorOptions: EditorOption[] = [\n  \"minLines\",\n  \"maxLines\",\n  \"readOnly\",\n  \"highlightActiveLine\",\n  \"tabSize\",\n  \"enableBasicAutocompletion\",\n  \"enableLiveAutocompletion\",\n  \"enableSnippets\"\n];\n\ntype EditorEvent =\n  | \"onChange\"\n  | \"onFocus\"\n  | \"onInput\"\n  | \"onBlur\"\n  | \"onCopy\"\n  | \"onPaste\"\n  | \"onSelectionChange\"\n  | \"onCursorChange\"\n  | \"onScroll\"\n  | \"handleOptions\"\n  | \"updateRef\";\n\nconst editorEvents: EditorEvent[] = [\n  \"onChange\",\n  \"onFocus\",\n  \"onInput\",\n  \"onBlur\",\n  \"onCopy\",\n  \"onPaste\",\n  \"onSelectionChange\",\n  \"onCursorChange\",\n  \"onScroll\",\n  \"handleOptions\",\n  \"updateRef\"\n];\n\n// Typescript globals definition to allow us to create a window object during SSR.\ndeclare global {\n  namespace NodeJS {\n    // tslint:disable-next-line\n    interface Global {\n      window: any;\n    }\n  }\n}\nconst getAceInstance = (): typeof AceBuilds => {\n  let ace;\n  if (typeof window === \"undefined\") {\n    // ace-builds just needs some window object to attach ace to.\n    // During SSR even just an empty object will work.\n    global.window = {};\n    ace = require(\"ace-builds\");\n    // And it can be discarded immediately afterward to avoid confusing\n    // other libraries that might detect SSR the same way we did.\n    delete global.window;\n  } else if ((window as any).ace) {\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\n    ace = (window as any).ace;\n    ace.acequire = (window as any).ace.require || (window as any).ace.acequire;\n  } else {\n    ace = require(\"ace-builds\");\n  }\n  return ace;\n};\n\nconst debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timer: any = null;\n  // tslint:disable-next-line\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\nexport { editorOptions, editorEvents, debounce, getAceInstance };\n"]},"metadata":{},"sourceType":"script"}