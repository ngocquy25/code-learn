import React from "react";
import { MonacoDiffEditorProps, MonacoEditorProps } from "react-monaco-editor";
export interface ResponsiveEditorBaseProps {
    rerenderTimeoutAfterResizeInMs?: number;
}
export interface ResponsiveMonacoEditorProps extends MonacoEditorProps, ResponsiveEditorBaseProps {
}
export interface ResponsiveMonacoDiffEditorProps extends MonacoDiffEditorProps, ResponsiveEditorBaseProps {
}
export interface ResponsiveMonacoEditorState {
    size: {
        width: number | null;
        height: number | null;
    };
    needsToRepaint: boolean;
}
export declare class ResponsiveMonacoEditor extends React.Component<ResponsiveMonacoEditorProps, ResponsiveMonacoEditorState> {
    static defaultProps: Pick<ResponsiveMonacoEditorProps, "editorDidMount" | "options" | "rerenderTimeoutAfterResizeInMs">;
    state: ResponsiveMonacoEditorState;
    protected containerRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getSnapshotBeforeUpdate(): null;
    shouldComponentUpdate(): boolean;
    componentDidUpdate(): void;
    render(): JSX.Element;
    protected sizeIsFixed(): boolean;
    protected onWindowResize: (ev: UIEvent) => void;
    protected computeNewSize(): {
        height: number | null;
        needsToRepaint: boolean;
        width: number | null;
    };
    protected reRenderIfNecessaryAfterTimeout(): void;
}
export declare class ResponsiveMonacoDiffEditor extends React.Component<ResponsiveMonacoDiffEditorProps, ResponsiveMonacoEditorState> {
    static defaultProps: Pick<ResponsiveMonacoEditorProps, "editorDidMount" | "options" | "rerenderTimeoutAfterResizeInMs">;
    state: ResponsiveMonacoEditorState;
    protected containerRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getSnapshotBeforeUpdate(): null;
    shouldComponentUpdate(): boolean;
    componentDidUpdate(): void;
    render(): JSX.Element;
    protected sizeIsFixed(): boolean;
    protected onWindowResize: (ev: UIEvent) => void;
    protected computeNewSize(): {
        height: number | null;
        needsToRepaint: boolean;
        width: number | null;
    };
    protected reRenderIfNecessaryAfterTimeout(): void;
}
