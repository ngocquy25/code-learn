"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var react_1 = __importDefault(require("react"));
var react_monaco_editor_1 = __importStar(require("react-monaco-editor"));
var defaultProps = {
    editorDidMount: function (editor, monacoInstance) {
        editor.focus();
    },
    options: {
        selectOnLineNumbers: true
    },
    rerenderTimeoutAfterResizeInMs: 100
};
var ResponsiveMonacoEditor = (function (_super) {
    __extends(ResponsiveMonacoEditor, _super);
    function ResponsiveMonacoEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            needsToRepaint: false,
            size: {
                height: null,
                width: null
            }
        };
        _this.containerRef = react_1["default"].createRef();
        _this.onWindowResize = function (ev) {
            var _a = _this.computeNewSize(), needsToRepaint = _a.needsToRepaint, width = _a.width, height = _a.height;
            _this.setState(__assign({}, _this.state, { needsToRepaint: needsToRepaint, size: {
                    height: height,
                    width: width
                } }));
            if (needsToRepaint) {
                _this.reRenderIfNecessaryAfterTimeout();
            }
        };
        return _this;
    }
    ResponsiveMonacoEditor.prototype.componentDidMount = function () {
        if (!this.sizeIsFixed()) {
            this.setState(__assign({}, this.state, { needsToRepaint: false, size: {
                    height: this.containerRef.current.clientHeight || null,
                    width: this.containerRef.current.clientWidth || null
                } }));
            if (window) {
                window.addEventListener("resize", this.onWindowResize);
            }
        }
    };
    ResponsiveMonacoEditor.prototype.componentWillUnmount = function () {
        if (!this.sizeIsFixed()) {
            if (window) {
                window.removeEventListener("resize", this.onWindowResize);
            }
        }
    };
    ResponsiveMonacoEditor.prototype.getSnapshotBeforeUpdate = function () {
        this.state.needsToRepaint = true;
        return null;
    };
    ResponsiveMonacoEditor.prototype.shouldComponentUpdate = function () {
        return !this.sizeIsFixed() || this.state.needsToRepaint;
    };
    ResponsiveMonacoEditor.prototype.componentDidUpdate = function () {
        this.state.needsToRepaint = false;
    };
    ResponsiveMonacoEditor.prototype.render = function () {
        var _a = this.props, width = _a.width, height = _a.height, rerenderTimeoutAfterResizeInMs = _a.rerenderTimeoutAfterResizeInMs, props = __rest(_a, ["width", "height", "rerenderTimeoutAfterResizeInMs"]);
        return (react_1["default"].createElement("div", { ref: this.containerRef, style: {
                height: "100%",
                maxHeight: "100%",
                maxWidth: "100%",
                overflow: "hidden",
                position: "relative",
                width: "100%"
            } },
            react_1["default"].createElement("div", { style: {
                    height: "100%",
                    left: 0,
                    overflow: "hidden",
                    position: "absolute",
                    top: 0,
                    width: "100%"
                } },
                react_1["default"].createElement(react_monaco_editor_1["default"], __assign({ width: this.sizeIsFixed() ? width : this.state.size.width + "px", height: this.sizeIsFixed() ? height : this.state.size.height + "px" }, props)))));
    };
    ResponsiveMonacoEditor.prototype.sizeIsFixed = function () {
        return typeof this.props.width !== "undefined" || typeof this.props.width !== "undefined";
    };
    ResponsiveMonacoEditor.prototype.computeNewSize = function () {
        var height = this.containerRef.current.clientHeight || null;
        var width = this.containerRef.current.clientWidth || null;
        var needsToRepaint = this.state.needsToRepaint || this.state.size.width !== width || this.state.size.height !== height;
        return {
            height: height,
            needsToRepaint: needsToRepaint,
            width: width
        };
    };
    ResponsiveMonacoEditor.prototype.reRenderIfNecessaryAfterTimeout = function () {
        var _this = this;
        setTimeout(function () {
            var _a = _this.computeNewSize(), needsToRepaint = _a.needsToRepaint, width = _a.width, height = _a.height;
            if (!needsToRepaint) {
                return;
            }
            _this.setState(__assign({}, _this.state, { needsToRepaint: true, size: {
                    height: height,
                    width: width
                } }));
        }, this.props.rerenderTimeoutAfterResizeInMs);
    };
    ResponsiveMonacoEditor.defaultProps = defaultProps;
    return ResponsiveMonacoEditor;
}(react_1["default"].Component));
exports.ResponsiveMonacoEditor = ResponsiveMonacoEditor;
var ResponsiveMonacoDiffEditor = (function (_super) {
    __extends(ResponsiveMonacoDiffEditor, _super);
    function ResponsiveMonacoDiffEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            needsToRepaint: false,
            size: {
                height: null,
                width: null
            }
        };
        _this.containerRef = react_1["default"].createRef();
        _this.onWindowResize = function (ev) {
            var _a = _this.computeNewSize(), needsToRepaint = _a.needsToRepaint, width = _a.width, height = _a.height;
            _this.setState(__assign({}, _this.state, { needsToRepaint: needsToRepaint, size: {
                    height: height,
                    width: width
                } }));
            if (needsToRepaint) {
                _this.reRenderIfNecessaryAfterTimeout();
            }
        };
        return _this;
    }
    ResponsiveMonacoDiffEditor.prototype.componentDidMount = function () {
        var _this = this;
        if (!this.sizeIsFixed()) {
            this.setState(__assign({}, this.state, { needsToRepaint: false, size: {
                    height: this.containerRef.current.clientHeight || null,
                    width: this.containerRef.current.clientWidth || null
                } }));
            if (window) {
                window.addEventListener("resize", function (ev) { return _this.onWindowResize; });
            }
        }
    };
    ResponsiveMonacoDiffEditor.prototype.componentWillUnmount = function () {
        if (!this.sizeIsFixed()) {
            if (window) {
                window.removeEventListener("resize", this.onWindowResize);
            }
        }
    };
    ResponsiveMonacoDiffEditor.prototype.getSnapshotBeforeUpdate = function () {
        this.state.needsToRepaint = true;
        return null;
    };
    ResponsiveMonacoDiffEditor.prototype.shouldComponentUpdate = function () {
        return !this.sizeIsFixed() || this.state.needsToRepaint;
    };
    ResponsiveMonacoDiffEditor.prototype.componentDidUpdate = function () {
        this.state.needsToRepaint = false;
    };
    ResponsiveMonacoDiffEditor.prototype.render = function () {
        var _a = this.props, width = _a.width, height = _a.height, rerenderTimeoutAfterResizeInMs = _a.rerenderTimeoutAfterResizeInMs, props = __rest(_a, ["width", "height", "rerenderTimeoutAfterResizeInMs"]);
        return (react_1["default"].createElement("div", { ref: this.containerRef, style: {
                height: "100%",
                maxHeight: "100%",
                maxWidth: "100%",
                overflow: "hidden",
                position: "relative",
                width: "100%"
            } },
            react_1["default"].createElement("div", { style: {
                    height: "100%",
                    left: 0,
                    overflow: "hidden",
                    position: "absolute",
                    top: 0,
                    width: "100%"
                } },
                react_1["default"].createElement(react_monaco_editor_1.MonacoDiffEditor, __assign({ width: this.sizeIsFixed() ? width : this.state.size.width + "px", height: this.sizeIsFixed() ? height : this.state.size.height + "px" }, props)))));
    };
    ResponsiveMonacoDiffEditor.prototype.sizeIsFixed = function () {
        return typeof this.props.width !== "undefined" || typeof this.props.width !== "undefined";
    };
    ResponsiveMonacoDiffEditor.prototype.computeNewSize = function () {
        var height = this.containerRef.current.clientHeight || null;
        var width = this.containerRef.current.clientWidth || null;
        var needsToRepaint = this.state.needsToRepaint || this.state.size.width !== width || this.state.size.height !== height;
        return {
            height: height,
            needsToRepaint: needsToRepaint,
            width: width
        };
    };
    ResponsiveMonacoDiffEditor.prototype.reRenderIfNecessaryAfterTimeout = function () {
        var _this = this;
        setTimeout(function () {
            var _a = _this.computeNewSize(), needsToRepaint = _a.needsToRepaint, width = _a.width, height = _a.height;
            if (!needsToRepaint) {
                return;
            }
            _this.setState(__assign({}, _this.state, { needsToRepaint: true, size: {
                    height: height,
                    width: width
                } }));
        }, this.props.rerenderTimeoutAfterResizeInMs);
    };
    ResponsiveMonacoDiffEditor.defaultProps = defaultProps;
    return ResponsiveMonacoDiffEditor;
}(react_1["default"].Component));
exports.ResponsiveMonacoDiffEditor = ResponsiveMonacoDiffEditor;
//# sourceMappingURL=index.js.map