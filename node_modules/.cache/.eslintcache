[{"/Users/jirou/Coding/React/code-learn/src/index.js":"1","/Users/jirou/Coding/React/code-learn/src/App.js":"2","/Users/jirou/Coding/React/code-learn/src/reportWebVitals.js":"3","/Users/jirou/Coding/React/code-learn/src/components/Pagination/Pagination.js":"4","/Users/jirou/Coding/React/code-learn/src/components/Problem/Problem.js":"5","/Users/jirou/Coding/React/code-learn/src/components/Editor/CodeEditor.js":"6","/Users/jirou/Coding/React/code-learn/src/components/Loading/Loading.js":"7","/Users/jirou/Coding/React/code-learn/src/components/Testcase/Testcase.js":"8"},{"size":500,"mtime":1642959236958,"results":"9","hashOfConfig":"10"},{"size":2327,"mtime":1647419316988,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1642959236959,"results":"12","hashOfConfig":"10"},{"size":1651,"mtime":1647417579441,"results":"13","hashOfConfig":"10"},{"size":2587,"mtime":1647418549894,"results":"14","hashOfConfig":"10"},{"size":5460,"mtime":1647419272279,"results":"15","hashOfConfig":"10"},{"size":391,"mtime":1647403911140,"results":"16","hashOfConfig":"10"},{"size":7092,"mtime":1647418696836,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17i8d3i",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jirou/Coding/React/code-learn/src/index.js",[],"/Users/jirou/Coding/React/code-learn/src/App.js",["37"],"import React, { useState, useEffect } from 'react';\nimport SplitPane from 'react-split-pane';\nimport CodeEditor from './components/Editor/CodeEditor';\nimport Problem from './components/Problem/Problem';\nimport PaginationBasic from './components/Pagination/Pagination';\nimport { Navbar, Container, Tab, Tabs } from 'react-bootstrap';\nimport { TiLockClosed } from \"react-icons/ti\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nfunction App() {\n  const [questions, setQuestion] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [status, setStatus] = useState(true);\n\n  const handlePagination = (page) => {\n    setStatus(false);\n    setCurrentPage(page);\n  }\n\n  // Get current question\n  const currentQuestion = questions.slice(currentPage - 1, currentPage);\n\n  useEffect(() => {\n    fetch(\"http://runcode.cyberlearn.vn/getAllQuestion\")\n      .then(res => res.json())\n      .then(data => {\n          setQuestion(data);\n        },\n        (error) => {\n          setQuestion(error);\n        }\n      )\n  }, []);\n\n  return (\n    <Container fluid>\n      <SplitPane\n        split='vertical'\n        defaultSize='50%'\n        minSize={500}\n        maxSize={800}\n        >\n          <div className=\"flex-container left\">\n            <Tabs defaultActiveKey=\"1\" className=\"shadow-down\" fill justify>\n              <Tab eventKey=\"1\" title=\"Problem\">\n                <Problem className=\"flex-item\" question={currentQuestion}/>\n              </Tab>\n              <Tab eventKey=\"2\" title=\"Submissions\">\n              </Tab>\n              <Tab eventKey=\"3\" title={\n                <div>\n                  <TiLockClosed className=\"icon-lock\" />\n                  <span>Solution</span>\n                </div>\n              } disabled>\n              </Tab>\n              <Tab eventKey=\"4\" title=\"Discuss\">\n              </Tab>\n            </Tabs>\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"footer shadow-up\">\n              <PaginationBasic \n                question={questions}\n                current={currentPage} \n                paginate={handlePagination}\n              />\n            </Navbar>\n          </div>\n          <div className=\"right\">\n            <CodeEditor question={currentQuestion} />\n          </div>\n        </SplitPane>\n    </Container>\n  );\n};\n\nexport default App;","/Users/jirou/Coding/React/code-learn/src/reportWebVitals.js",[],"/Users/jirou/Coding/React/code-learn/src/components/Pagination/Pagination.js",["38"],"import React from \"react\";\n\nimport { Pagination, Button } from \"react-bootstrap\";\n\nimport { BsChevronLeft, BsChevronRight } from \"react-icons/bs\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Pagination.css';\n\n\nconst PaginationBasic = (props) => {\n    \n    const totalQuests = props.question.length;\n\n    const pageNumbers = [];\n    for (let i = 1; i <= totalQuests; i++) pageNumbers.push(i);\n\n    const handleNextPage = () => {\n        let next = (props.current === totalQuests)? props.current: props.current + 1;\n        props.paginate(next);\n    }\n    \n    const handlePrevPage = () => {\n        let prev = (props.current > 1)? (props.current - 1) : 1;\n        props.paginate(prev);\n    }\n\n    return (\n        // <Pagination className=\"paginate\">\n        //     {/* <Pagination.First id=\"paginate-item\" onClick={() => props.paginate(1)}/> */}\n        //     <Pagination.Prev id=\"paginate-item\" onClick={handlePrevPage}/>\n        //     <Pagination.Next id=\"paginate-item\" onClick={handleNextPage}/>\n        //     {/* <Pagination.Last id=\"paginate-item\" onClick={() => props.paginate(totalQuests)}/> */}\n        // </Pagination>\n        <div className=\"pagination\">\n            <Button className=\"btn-chevron\" onClick={handlePrevPage}>\n                <BsChevronLeft className=\"icon-chevron\" />\n            </Button>\n            <div className=\"paginate-text\">Previous</div>\n            <div className=\"paginate-text\">Next</div>\n            <Button className=\"btn-chevron\" onClick={handleNextPage}>\n                <BsChevronRight className=\"icon-chevron\" />\n            </Button>\n        </div>\n    );\n};\n\nexport default PaginationBasic;","/Users/jirou/Coding/React/code-learn/src/components/Problem/Problem.js",[],"/Users/jirou/Coding/React/code-learn/src/components/Editor/CodeEditor.js",["39"],"import React, { useEffect, useRef, useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\n// import { ResponsiveMonacoEditor } from \"responsive-react-monaco-editor\";\nimport { Nav, Button, Navbar, Form, ToggleButton } from \"react-bootstrap\";\nimport { HiMoon, HiRefresh } from \"react-icons/hi\";\nimport { BsSunFill } from \"react-icons/bs\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Editor.css';\nimport Testcase from \"../Testcase/Testcase\";\nimport Loading from \"../Loading/Loading\";\n\nconst CodeEditor = ({ question }) => {\n\n    const langOptions = [\n        { value: 'none', label: 'Select language'},\n        { value: 'javascript', label: 'Javascript (node v14.7.0)' },\n        { value: 'cpp', label: 'C++ (g++ 9.2.1)' },\n        { value: 'python', label: 'Python (3.9.1)' },\n        { value: 'java', label: 'Java (17.0.1)' },\n    ];\n\n    const [defaultCode, setDefaultCode] = useState('');\n    const [code, setCode] = useState('');\n    const [lang, setLang] = useState('none');\n    const [theme, setTheme] = useState('vs-dark');\n    const [currentOutput, setCurrentOutput] = useState();\n    const [output, setOutput] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleLanguage = (e, init_code) => {\n        let l = e.target.value\n        if (l === \"none\") {\n            setDefaultCode('');\n            setCode('');\n        } else {\n            setLang(l);\n            if (l === \"python\") l = \"py\";\n            else if (l === \"javascript\") l = \"js\";\n            let c = init_code.find(x => x._language === l)._function;\n            setDefaultCode(c);\n            setCode(c);\n        }\n    }\n\n    const changeTheme = () => {\n        if (theme === 'light') setTheme('vs-dark');\n        else setTheme('light');\n    }\n\n    const editorRef = useRef(null);\n\n    const handleEditorDidMount = (editor, monaco) => {\n        editorRef.current = editor;\n    }\n\n    const handleSubmit = async () => {\n        setCurrentOutput(question[0].question_id);\n        let l = lang;\n        if (l === \"python\") l = \"py\";\n        else if (l === \"javascript\") l = \"js\";\n\n        let content = JSON.stringify({\n            question: question[0].question_id,\n            language: l,\n            code: code\n        });\n\n        console.log(\"post:\", content);\n\n        try {\n            setLoading(true);\n            const res = await fetch('http://runcode.cyberlearn.vn/submit', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: content\n            });\n\n            const data = await res.json();\n            console.log(\"return:\", data);\n            setOutput(data);\n            setLoading(false);\n        }\n        catch (e) {\n            console.log(e);\n        }\n    };\n\n    // useEffect(() => {\n    //     handleSubmit()\n    // }, []);\n\n    return(\n        <>\n            <>\n            {question.map(({\n                question_id,\n                init_code\n            }) => (\n            <div key={question_id}>\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"shadow-down\">\n                <Nav className=\"container-fluid\">\n                    <Nav.Item className=\"first-section\">\n                        <ToggleButton className=\"btn-toggle\" onClick={changeTheme} >\n                            {theme === \"light\" ? \n                            <HiMoon className=\"icon\"/> : <BsSunFill className=\"icon\"/>}\n                        </ToggleButton>\n                    </Nav.Item>\n                    <Nav.Item className=\"me-auto\">\n                        <ToggleButton className=\"btn-toggle\" onClick={() => setCode(defaultCode)} >\n                            <HiRefresh className=\"icon\"/>\n                        </ToggleButton>\n                    </Nav.Item>\n                    <Nav.Item className=\"ml-auto\">\n                        <Form.Select className=\"select-language\" onChange={e => handleLanguage(e, init_code)}>\n                            {/* <option>Select language</option> */}\n                            {langOptions.map(lang => (\n                            <option key={lang.value} value={lang.value}>{lang.label}</option>\n                            ))}\n                        </Form.Select>\n                    </Nav.Item>\n                </Nav>\n            </Navbar>\n            </div> \n            ))}\n            \n            <Editor\n                width=\"99%\"\n                height=\"100%\"\n                theme={theme}\n                // defaultLanguage=\"javascript\"\n                language={lang}\n                // defaultValue={defaultCode}\n                value={code}\n                onChange={(value) => setCode(value)}\n                onMount={handleEditorDidMount}\n                options={{\n                    fontSize: 14,\n                    tabSize: 4,\n                    minimap: {\n                        enabled: false\n                    },\n                }}\n                \n            />\n               \n            <Testcase question={question} current={currentOutput} output={output}/>\n\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"footer shadow-up\">\n                <Button className=\"btn-submit\" type=\"submit\"\n                    onClick={handleSubmit}>Submit</Button>  \n            </Navbar>\n            </>\n            {loading && <Loading/>}\n        </>\n    );\n};\n\nexport default CodeEditor;\n","/Users/jirou/Coding/React/code-learn/src/components/Loading/Loading.js",[],"/Users/jirou/Coding/React/code-learn/src/components/Testcase/Testcase.js",[],{"ruleId":"40","severity":1,"message":"41","line":16,"column":10,"nodeType":"42","messageId":"43","endLine":16,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":20},{"ruleId":"40","severity":1,"message":"45","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":26},"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'Pagination' is defined but never used.","'useEffect' is defined but never used."]