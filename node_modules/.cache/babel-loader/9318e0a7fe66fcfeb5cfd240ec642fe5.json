{"ast":null,"code":"var _jsxFileName = \"/Users/jirou/Coding/React/code-learn/src/components/Editor/CodeEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Editor from \"@monaco-editor/react\"; // import { ResponsiveMonacoEditor } from \"responsive-react-monaco-editor\";\n\nimport { Nav, Button, Navbar, Form, ToggleButton } from \"react-bootstrap\";\nimport { HiMoon, HiRefresh } from \"react-icons/hi\";\nimport { BsSunFill } from \"react-icons/bs\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Editor.css';\nimport Testcase from \"../Testcase/Testcase\";\nimport Loading from \"../Loading/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = _ref => {\n  _s();\n\n  let {\n    question,\n    status\n  } = _ref;\n  const langOptions = [{\n    value: 'none',\n    label: 'Select language'\n  }, {\n    value: 'javascript',\n    label: 'Javascript (node v14.7.0)'\n  }, {\n    value: 'cpp',\n    label: 'C++ (g++ 9.2.1)'\n  }, {\n    value: 'python',\n    label: 'Python (3.9.1)'\n  }, {\n    value: 'java',\n    label: 'Java (17.0.1)'\n  }];\n  const [defaultCode, setDefaultCode] = useState('');\n  const [code, setCode] = useState('');\n  const [lang, setLang] = useState('none');\n  const [theme, setTheme] = useState('vs-dark');\n  const [currentOutput, setCurrentOutput] = useState();\n  const [output, setOutput] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleLanguage = (e, init_code) => {\n    let l = e.target.value;\n\n    if (l === \"none\") {\n      setDefaultCode('');\n      setCode('');\n    } else {\n      setLang(l);\n      if (l === \"python\") l = \"py\";else if (l === \"javascript\") l = \"js\";\n\n      let c = init_code.find(x => x._language === l)._function;\n\n      setDefaultCode(c);\n      setCode(c);\n    }\n  };\n\n  const changeTheme = () => {\n    if (theme === 'light') setTheme('vs-dark');else setTheme('light');\n  };\n\n  const editorRef = useRef(null);\n\n  const handleEditorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n  };\n\n  const handleSubmit = async () => {\n    setCurrentOutput(question[0].question_id);\n    let l = lang;\n    if (l === \"python\") l = \"py\";else if (l === \"javascript\") l = \"js\";\n    let content = JSON.stringify({\n      question: question[0].question_id,\n      language: l,\n      code: code\n    });\n    console.log(\"post:\", content);\n\n    try {\n      setLoading(true);\n      const res = await fetch('http://runcode.cyberlearn.vn/submit', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: content\n      });\n      const data = await res.json();\n      console.log(\"return:\", data);\n      setOutput(data);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }; // useEffect(() => {\n  //     handleSubmit()\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [question.map(_ref2 => {\n        let {\n          question_id,\n          init_code\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Navbar, {\n            bg: \"dark\",\n            variant: \"dark\",\n            className: \"shadow-down\",\n            children: /*#__PURE__*/_jsxDEV(Nav, {\n              className: \"container-fluid\",\n              children: [/*#__PURE__*/_jsxDEV(Nav.Item, {\n                className: \"first-section\",\n                children: /*#__PURE__*/_jsxDEV(ToggleButton, {\n                  className: \"btn-toggle\",\n                  onClick: changeTheme,\n                  children: theme === \"light\" ? /*#__PURE__*/_jsxDEV(HiMoon, {\n                    className: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(BsSunFill, {\n                    className: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 58\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n                className: \"me-auto\",\n                children: /*#__PURE__*/_jsxDEV(ToggleButton, {\n                  className: \"btn-toggle\",\n                  onClick: () => setCode(defaultCode),\n                  children: /*#__PURE__*/_jsxDEV(HiRefresh, {\n                    className: \"icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n                className: \"ml-auto\",\n                children: /*#__PURE__*/_jsxDEV(Form.Select, {\n                  className: \"select-language\",\n                  onChange: e => handleLanguage(e, init_code),\n                  children: langOptions.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: lang.value,\n                    children: lang.label\n                  }, lang.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, question_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Editor, {\n        width: \"99%\",\n        height: \"100%\",\n        theme: theme // defaultLanguage=\"javascript\"\n        ,\n        language: lang // defaultValue={defaultCode}\n        ,\n        value: code,\n        onChange: value => setCode(value),\n        onMount: handleEditorDidMount,\n        options: {\n          fontSize: 14,\n          tabSize: 4,\n          minimap: {\n            enabled: false\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Testcase, {\n        question: question,\n        current: currentOutput,\n        output: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        bg: \"dark\",\n        variant: \"dark\",\n        className: \"footer shadow-up\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"btn-submit\",\n          type: \"submit\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CodeEditor, \"OBjj8t/kIEK6/CI3wDTfSXqDM0U=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/jirou/Coding/React/code-learn/src/components/Editor/CodeEditor.js"],"names":["React","useEffect","useRef","useState","Editor","Nav","Button","Navbar","Form","ToggleButton","HiMoon","HiRefresh","BsSunFill","Testcase","Loading","CodeEditor","question","status","langOptions","value","label","defaultCode","setDefaultCode","code","setCode","lang","setLang","theme","setTheme","currentOutput","setCurrentOutput","output","setOutput","loading","setLoading","handleLanguage","e","init_code","l","target","c","find","x","_language","_function","changeTheme","editorRef","handleEditorDidMount","editor","monaco","current","handleSubmit","question_id","content","JSON","stringify","language","console","log","res","fetch","method","headers","body","data","json","map","fontSize","tabSize","minimap","enabled"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\n// import { ResponsiveMonacoEditor } from \"responsive-react-monaco-editor\";\nimport { Nav, Button, Navbar, Form, ToggleButton } from \"react-bootstrap\";\nimport { HiMoon, HiRefresh } from \"react-icons/hi\";\nimport { BsSunFill } from \"react-icons/bs\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Editor.css';\nimport Testcase from \"../Testcase/Testcase\";\nimport Loading from \"../Loading/Loading\";\n\nconst CodeEditor = ({ question, status }) => {\n\n    const langOptions = [\n        { value: 'none', label: 'Select language'},\n        { value: 'javascript', label: 'Javascript (node v14.7.0)' },\n        { value: 'cpp', label: 'C++ (g++ 9.2.1)' },\n        { value: 'python', label: 'Python (3.9.1)' },\n        { value: 'java', label: 'Java (17.0.1)' },\n    ];\n\n    const [defaultCode, setDefaultCode] = useState('');\n    const [code, setCode] = useState('');\n    const [lang, setLang] = useState('none');\n    const [theme, setTheme] = useState('vs-dark');\n    const [currentOutput, setCurrentOutput] = useState();\n    const [output, setOutput] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const handleLanguage = (e, init_code) => {\n        let l = e.target.value\n        if (l === \"none\") {\n            setDefaultCode('');\n            setCode('');\n        } else {\n            setLang(l);\n            if (l === \"python\") l = \"py\";\n            else if (l === \"javascript\") l = \"js\";\n            let c = init_code.find(x => x._language === l)._function;\n            setDefaultCode(c);\n            setCode(c);\n        }\n    }\n\n    const changeTheme = () => {\n        if (theme === 'light') setTheme('vs-dark');\n        else setTheme('light');\n    }\n\n    const editorRef = useRef(null);\n\n    const handleEditorDidMount = (editor, monaco) => {\n        editorRef.current = editor;\n    }\n\n    const handleSubmit = async () => {\n        setCurrentOutput(question[0].question_id);\n        let l = lang;\n        if (l === \"python\") l = \"py\";\n        else if (l === \"javascript\") l = \"js\";\n\n        let content = JSON.stringify({\n            question: question[0].question_id,\n            language: l,\n            code: code\n        });\n\n        console.log(\"post:\", content);\n\n        try {\n            setLoading(true);\n            const res = await fetch('http://runcode.cyberlearn.vn/submit', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: content\n            });\n\n            const data = await res.json();\n            console.log(\"return:\", data);\n            setOutput(data);\n            setLoading(false);\n        }\n        catch (e) {\n            console.log(e);\n        }\n    };\n\n    // useEffect(() => {\n    //     handleSubmit()\n    // }, []);\n\n    return(\n        <>\n            <>\n            {question.map(({\n                question_id,\n                init_code\n            }) => (\n            <div key={question_id}>\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"shadow-down\">\n                <Nav className=\"container-fluid\">\n                    <Nav.Item className=\"first-section\">\n                        <ToggleButton className=\"btn-toggle\" onClick={changeTheme} >\n                            {theme === \"light\" ? \n                            <HiMoon className=\"icon\"/> : <BsSunFill className=\"icon\"/>}\n                        </ToggleButton>\n                    </Nav.Item>\n                    <Nav.Item className=\"me-auto\">\n                        <ToggleButton className=\"btn-toggle\" onClick={() => setCode(defaultCode)} >\n                            <HiRefresh className=\"icon\"/>\n                        </ToggleButton>\n                    </Nav.Item>\n                    <Nav.Item className=\"ml-auto\">\n                        <Form.Select className=\"select-language\" onChange={e => handleLanguage(e, init_code)}>\n                            {/* <option>Select language</option> */}\n                            {langOptions.map(lang => (\n                            <option key={lang.value} value={lang.value}>{lang.label}</option>\n                            ))}\n                        </Form.Select>\n                    </Nav.Item>\n                </Nav>\n            </Navbar>\n            </div> \n            ))}\n            \n            <Editor\n                width=\"99%\"\n                height=\"100%\"\n                theme={theme}\n                // defaultLanguage=\"javascript\"\n                language={lang}\n                // defaultValue={defaultCode}\n                value={code}\n                onChange={(value) => setCode(value)}\n                onMount={handleEditorDidMount}\n                options={{\n                    fontSize: 14,\n                    tabSize: 4,\n                    minimap: {\n                        enabled: false\n                    },\n                }}\n                \n            />\n               \n            <Testcase question={question} current={currentOutput} output={output}/>\n\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"footer shadow-up\">\n                <Button className=\"btn-submit\" type=\"submit\"\n                    onClick={handleSubmit}>Submit</Button>  \n            </Navbar>\n            </>\n            {loading && <Loading/>}\n        </>\n    );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}